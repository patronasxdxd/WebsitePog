import {
  ButtonBase$1,
  Ce$1$2,
  color$3,
  getShade$2,
  jsx$4,
  require_react,
  styled$1$2
} from "./chunk-L6MV2ZBE.js";
import "./chunk-QDADR27D.js";
import "./chunk-N26OLTN6.js";
import "./chunk-Y3U5W2SV.js";
import "./chunk-5PXD5ZAG.js";
import "./chunk-UJII67DZ.js";
import "./chunk-G3LXFHP3.js";
import "./chunk-5QXZNWNO.js";
import "./chunk-SAXAG7U6.js";
import "./chunk-4CWOH7XN.js";
import {
  __toESM
} from "./chunk-JZQ37OGZ.js";

// ../node_modules/web3uikit/dist/ButtonColored.js
var import_react = __toESM(require_react());
var coloredShades = Ce$1$2`
    :after {
        background-color: ${getShade$2("light", 90)};
    }

    :hover {
        :after {
            background-color: ${getShade$2("light", 70)};
        }
    }

    :active {
        :after {
            background-color: ${getShade$2("light", 50)};
        }
    }
`;
var coloredRed = Ce$1$2`
    background-color: ${color$3.red};
    border-color: ${color$3.red};
    color: ${color$3.red};

    :focus {
        box-shadow: 0px 0px 0px 2px ${color$3.paleCerulean};
    }

    svg {
        fill: ${color$3.red};
    }

    ${coloredShades}
`;
var coloredGreen = Ce$1$2`
    background-color: ${color$3.green};
    border-color: ${color$3.green};
    color: ${color$3.green};

    :focus {
        box-shadow: 0px 0px 0px 2px ${color$3.paleCerulean};
    }

    svg {
        fill: ${color$3.green};
    }

    ${coloredShades}
`;
var coloredBlue = Ce$1$2`
    background-color: ${color$3.blue};
    border-color: ${color$3.blue};
    color: ${color$3.blue};

    :focus {
        box-shadow: 0px 0px 0px 2px ${color$3.paleCerulean};
    }

    svg {
        fill: ${color$3.blue};
    }

    ${coloredShades}
`;
var coloredYellow = Ce$1$2`
    background-color: ${color$3.yellow};
    border-color: ${color$3.yellow};
    color: ${color$3.yellow};

    :focus {
        box-shadow: 0px 0px 0px 2px ${color$3.paleCerulean};
    }

    svg {
        fill: ${color$3.yellow};
    }

    ${coloredShades}
`;
var getColored = (color2) => {
  switch (color2) {
    case "red":
      return coloredRed;
    case "green":
      return coloredGreen;
    case "blue":
      return coloredBlue;
    case "yellow":
      return coloredYellow;
    default:
      return;
  }
};
var ButtonColoredStyled$1 = styled$1$2(ButtonBase$1)`
    :after {
        background-color: ${getShade$2("dark", 0)};
        content: '';
        display: block;
        height: 100%;
        left: 0;
        pointer-events: none;
        position: absolute;
        top: 0;
        transition: all 0.3s ease;
        width: 100%;
        z-index: 0;
    }

    ${({
  color: color2
}) => color2 && getColored(color2)}
`;
var styles = {
  ButtonColoredStyled: ButtonColoredStyled$1
};
var {
  ButtonColoredStyled
} = styles;
var ButtonColored = ({
  color: color2,
  ...props
}) => jsx$4(ButtonColoredStyled, {
  color: color2,
  ...props
});
export {
  ButtonColored as default
};
//# sourceMappingURL=ButtonColored-QCDR7R5I.js.map
